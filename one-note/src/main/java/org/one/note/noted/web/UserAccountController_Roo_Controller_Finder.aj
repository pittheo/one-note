// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.one.note.noted.web;

import java.lang.Boolean;
import java.lang.String;
import org.one.note.noted.domain.UserAccount;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect UserAccountController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByEmailEquals", "form" }, method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByEmailEqualsForm(Model uiModel) {
        return "useraccounts/findUserAccountsByEmailEquals";
    }
    
    @RequestMapping(params = "find=ByEmailEquals", method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByEmailEquals(@RequestParam("email") String email, Model uiModel) {
        uiModel.addAttribute("useraccounts", UserAccount.findUserAccountsByEmailEquals(email).getResultList());
        return "useraccounts/list";
    }
    
    @RequestMapping(params = { "find=ByEmailEqualsAndPasswordEquals", "form" }, method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByEmailEqualsAndPasswordEqualsForm(Model uiModel) {
        return "useraccounts/findUserAccountsByEmailEqualsAndPasswordEquals";
    }
    
    @RequestMapping(params = "find=ByEmailEqualsAndPasswordEquals", method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByEmailEqualsAndPasswordEquals(@RequestParam("email") String email, @RequestParam("password") String password, Model uiModel) {
        uiModel.addAttribute("useraccounts", UserAccount.findUserAccountsByEmailEqualsAndPasswordEquals(email, password).getResultList());
        return "useraccounts/list";
    }
    
    @RequestMapping(params = { "find=ByUsernameEquals", "form" }, method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByUsernameEqualsForm(Model uiModel) {
        return "useraccounts/findUserAccountsByUsernameEquals";
    }
    
    @RequestMapping(params = "find=ByUsernameEquals", method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByUsernameEquals(@RequestParam("username") String username, Model uiModel) {
        uiModel.addAttribute("useraccounts", UserAccount.findUserAccountsByUsernameEquals(username).getResultList());
        return "useraccounts/list";
    }
    
    @RequestMapping(params = { "find=ByUsernameEqualsAndPasswordEquals", "form" }, method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByUsernameEqualsAndPasswordEqualsForm(Model uiModel) {
        return "useraccounts/findUserAccountsByUsernameEqualsAndPasswordEquals";
    }
    
    @RequestMapping(params = "find=ByUsernameEqualsAndPasswordEquals", method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByUsernameEqualsAndPasswordEquals(@RequestParam("username") String username, @RequestParam("password") String password, Model uiModel) {
        uiModel.addAttribute("useraccounts", UserAccount.findUserAccountsByUsernameEqualsAndPasswordEquals(username, password).getResultList());
        return "useraccounts/list";
    }
    
    @RequestMapping(params = { "find=ByUsernameLike", "form" }, method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByUsernameLikeForm(Model uiModel) {
        return "useraccounts/findUserAccountsByUsernameLike";
    }
    
    @RequestMapping(params = "find=ByUsernameLike", method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByUsernameLike(@RequestParam("username") String username, Model uiModel) {
        uiModel.addAttribute("useraccounts", UserAccount.findUserAccountsByUsernameLike(username).getResultList());
        return "useraccounts/list";
    }
    
    @RequestMapping(params = { "find=ByVerifiedNot", "form" }, method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByVerifiedNotForm(Model uiModel) {
        return "useraccounts/findUserAccountsByVerifiedNot";
    }
    
    @RequestMapping(params = "find=ByVerifiedNot", method = RequestMethod.GET)
    public String UserAccountController.findUserAccountsByVerifiedNot(@RequestParam(value = "verified", required = false) Boolean verified, Model uiModel) {
        uiModel.addAttribute("useraccounts", UserAccount.findUserAccountsByVerifiedNot(verified == null ? new Boolean(false) : verified).getResultList());
        return "useraccounts/list";
    }
    
}
