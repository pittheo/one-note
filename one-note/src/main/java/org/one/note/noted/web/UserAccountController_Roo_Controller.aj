// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.one.note.noted.web;

import java.awt.TrayIcon.MessageType;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Date;

import javax.mail.Message;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.joda.time.format.DateTimeFormat;
import org.one.note.noted.domain.UserAccount;
import org.one.note.noted.domain.UserProfile;
import org.one.note.noted.util.Utilities;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.mail.MailException;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect UserAccountController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String UserAccountController.create(@Valid UserAccount userAccount, BindingResult bindingResult, Model model, HttpServletRequest httpServletRequest) {
        System.out.println("Inside UserAccountController create");
    	if (bindingResult.hasErrors()) {
    		System.out.println("There are binding errors!");
    		
            model.addAttribute("userAccount", userAccount);
            return "useraccounts/create";
        }
    	
    	// Generate hash
    	String hash = Utilities.toMD5Hash(userAccount.getEmail() + userAccount.getPassword());
    	System.out.println("Hash is: " + hash);
    	userAccount.setHash(hash);
    	//userAccount.setFromRegistration(true);
    	
    	UserProfile profile = new UserProfile();
    	String emailHash = Utilities.toMD5Hash(userAccount.getEmail());
    	String profilePictureLink = "http://www.gravatar.com/avatar/" + emailHash +"?s=128&amp;d=identicon&amp;r=PG";
    	profile.setThumbnailPath(profilePictureLink);
    	profile.persist();
    	userAccount.setProfile(profile);
    	
        userAccount.persist();
        
       String activationLink = "http://" + envProperties.getDomainName() + "/betit/useraccounts/activate?email=" + userAccount.getEmail() + "&hash=" + hash;
       System.out.println("Activation link is: " + activationLink);
       try { 
	        // Send the registration email
			notificationService.sendAccountActivationEmail(userAccount, activationLink);
			model.addAttribute("verificationEmailSent", true);
			
			// SEND WELCOME MESSAGE TO THE PERSONS INBOX!
			sendAdminMessageToUser(WELCOME_SUBJECT, WELCOME_MESSAGE, userAccount);
		} catch(MailException me) {
			me.printStackTrace();
			System.out.println("Account registration failed!");
			String message = "You could not be registered due to a system error. " +
				"We apologize for any inconvenience.";
			model.addAttribute("verificationEmailSent", false);
			model.addAttribute("registration_success", false);
			model.addAttribute("message", message);
			return "useraccounts/create";
		}
        model.addAttribute("registration_success", true);
        model.addAttribute("email_address", userAccount.getEmail());
        
        //After successful creation, redirect to the same page & display a message.
        return "useraccounts/create";
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String UserAccountController.createForm(Model uiModel) {
        uiModel.addAttribute("userAccount", new UserAccount());
        addDateTimeFormatPatterns(uiModel);
        return "signup";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String UserAccountController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("useraccount", UserAccount.findUserAccount(id));
        uiModel.addAttribute("itemId", id);
        return "useraccounts/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String UserAccountController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("useraccounts", UserAccount.findUserAccountEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) UserAccount.countUserAccounts() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("useraccounts", UserAccount.findAllUserAccounts());
        }
        addDateTimeFormatPatterns(uiModel);
        return "useraccounts/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String UserAccountController.update(@Valid UserAccount userAccount, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("userAccount", userAccount);
            addDateTimeFormatPatterns(uiModel);
            return "useraccounts/update";
        }
        uiModel.asMap().clear();
        userAccount.merge();
        return "redirect:/useraccounts/" + encodeUrlPathSegment(userAccount.getId().toString(), httpServletRequest);
    }

	@RequestMapping(value="/activate", method=RequestMethod.GET)
	public String verifyRegistration(@RequestParam String email, @RequestParam String hash, ModelMap model, HttpSession session) {
		String message = null;
		UserAccount user = activateUserAccount(email, hash);
		if (user != null) {
			message = "Congratulations and welcome! No more waiting. Just login!";
			
			model.addAttribute("verified", "true");
			
			System.out.println("***Logging user " + user.getUsername() + " in!***");
			session.setAttribute("loggedIn", true);
			session.setAttribute("loggedUser", user);
			
			if (email.endsWith("@gmail.com")) {
				// Import the Gmail contacts
				
			}
			
		} else {
			message = "Your account could not be activated.";
			model.addAttribute("verified", "false");
		}
		System.out.println(message);
		model.addAttribute("message", message);
		System.out.println("Redirecting to bets!");
		return "redirect:/bets";
	}    
	
	
	public static void sendAdminMessageToUser(String subject, String content, UserAccount receiver) {
		System.out.println("Sending admin online message to user " + receiver.getUsername());
/*		Message message = new Message();
		UserAccount admin = UserAccount.findUserAccountsByUsernameEquals("admin").getSingleResult();
        message.setSender(admin);
        
        // TODO: For now we only accept one recipient. This should change.
        message.setReceiver(receiver);
        message.setSubject(subject);
        message.setContent(content);
        message.setFolder("Inbox");
        
        // For now we only accept Message as type.
        // TODO: To add Invitations (messageBean.getType())
        message.setType(MessageType.MESSAGE);
        message.setSentAt(new Date());
        
        message.persist();
*/        System.out.println("Online message sent. OK");
	}

	private UserAccount activateUserAccount(String email, String hash) {
		System.out.println("Hash: " + hash);
		System.out.println("Email: " + email);
		try {
			//UserAccount user = UserAccount.findUserAccountsByHashEqualsAndEmailEquals(hash, email).getSingleResult();
			UserAccount user = UserAccount.findUserAccountsByEmailEquals(email).getSingleResult();
		
			if (user != null) {
				user.setVerified(true);
				user.merge();
				return user;
			} 
		} catch(Exception e) {
			e.printStackTrace();
			return null;
		}
		return null;
	}
	
	
	@RequestMapping(value="/forgotPassword", method=RequestMethod.GET)
	public String showForgotPasswordForm(HttpServletRequest request, ModelMap model) {
		model.addAttribute("forgotPassword", "true");
		return "useraccounts/create?form";
	}
	
	
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String UserAccountController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("userAccount", UserAccount.findUserAccount(id));
        addDateTimeFormatPatterns(uiModel);
        return "useraccounts/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String UserAccountController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        UserAccount.findUserAccount(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/useraccounts";
    }
    
    @ModelAttribute("useraccounts")
    public Collection<UserAccount> UserAccountController.populateUserAccounts() {
        return UserAccount.findAllUserAccounts();
    }
    
    @ModelAttribute("userprofiles")
    public Collection<UserProfile> UserAccountController.populateUserProfiles() {
        return UserProfile.findAllUserProfiles();
    }
    
    void UserAccountController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("userAccount_createdat_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("userAccount_verifiedat_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    String UserAccountController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
